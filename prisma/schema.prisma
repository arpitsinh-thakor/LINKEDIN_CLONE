// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  name        String
  password    String
  posts       Post[]
  comments    Comment[]
  following   Following[] @relation("UserFollowing")
  followers   Following[] @relation("UserFollowers")
  currentCompany String?
  jobs        Job[]
  applications Application[]
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean     @default(false)
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
  comments    Comment[]
}

model Comment {
  id          Int         @id @default(autoincrement())
  text        String
  post        Post        @relation(fields: [postId], references: [id])
  postId      Int
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
}

model Following {
  id          Int         @id @default(autoincrement())
  follower    User        @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  Int
  following   User        @relation("UserFollowers", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}

model Job {
  id          Int         @id @default(autoincrement())
  title       String
  company     String
  location    String
  description String
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  salary      Int
  applications Application[]
}

model Application {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  job         Job         @relation(fields: [jobId], references: [id])
  jobId       Int
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}




